
// 전체적으로 주어진 기능 구현 완료 후 -> 코드 최적화 진행하고, 그 후 추가 기능 진행하려고 합니다 (예상일 : 01월 18일에 기능구현 끝나지 않을까요?)


// 공통 피드백 : 저는 개인적으로 백엔드 입장에서는 항상 프론트단으로 유의미한 데이터만 전달해줘야 한다고 생각합니다.
// 결국 이렇게 데이터를 뱉어내는 것도 하나의 자원이라 생각하기때문입니다.
-----------------


// 예를 들어서 판매자가 상품을 등록했으면 -> 그냥 그걸로 끝이지 굳이 불필요한 메시지가 필요할까에 관한 생각을 한번 해보셨으면 좋겠습니다.  ( 모든 로직 )
// 그리고 얼마전에 궁금해서 튜터님께 여쭤본 내용입니다.

Q: 예를들어 보드 서비스에서 -> member레포지토리를 받아서 사용하는 것이 맞을까요??
A: No -> 서비스를 참조해야한다였는데 이유가 기억이 안 납니다.. 아마 뭐 책임과 역할 뭐 그런 내용이였던걸로 기억하는데..

최종적으로 : 서비스 부문은 크게 확인을 안했습니다. -> 해당 내용들은 컨트롤러만 피드백 드렸습니다.


1. item부문
- item service를 구현체로 만들어서 사용하는 것이 확장성에 좋습니다 -> 샘플 : service-admin (한번 만들어 보심이 좋을 것 같습니다.)
- 제품조회 로직은 -> 누구나 이용할 수 있어야 한다고 생각합니다 ( 단건 조회, 모든 상품 조회 )
- itemDto 속에  request와 response를 같이 사용하시는데, 분리하는 것이 좋습니다.
- 예외는 서비스 로직에서 처리! (제품 조회 로직들)
- 지금 보면 @AuthenticationPrincipal에서 userDetails를 받아서 사용하는데, -> userDetailsimpl로 바꿀 것
이유는 userDetailsimpl이 userDetails를 상속받아서 사용한 구현체이기에!! 그냥 userDetails를 사용할 것이면 userDetaolsImpl을 만든 의미가 없음!

2. order부문

- 오더부분도 마찬가지로 dto를 분리하셔야 합니다.
- 토큰가지고 검증하는 부분 로직을 한번 생각해보셔야 할 것 같습니다.
그 이유는 결국 주문을 하는 로직에서는, 주문관련된 로직만 있어야 합니다. (하나의 책임만 할 수 있도록)
그런데 지금 보면 사용자를 검증하기 위한 책임도 하고 있으니, 한 서비스에서 2개의 책임을 하고 있는 것 같습니다.
- 예외처리는 서비스 로직에서!! (주문목록 조회)
상품 주문 부문... 생각해보자..

- 토큰을 가지고온다 -> claims를 선언 -> 만약 토큰이 널이 아닐 경우에 서비스 로직 실행 ->  토큰의 유효성을 검증하고.
- 이미 item에서는 사용자의 정보를 가지고 있다.  결국 토큰가지고 사용자 정보 가지고 오려고 하는것 같은데
@AuthenticationPrincipal -> 여기에서 사용자 정보 들고오면 될 것 같습니다.?( 현재 토큰의 주인 데이터)

