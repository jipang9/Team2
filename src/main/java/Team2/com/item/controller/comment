
// 전체적으로 주어진 기능 구현 완료 후 -> 코드 최적화 진행하고, 그 후 추가 기능 진행하려고 합니다 (예상일 : 01월 18일에 기능구현 끝나지 않을까요?)


// 공통 피드백 : 저는 개인적으로 백엔드 입장에서는 항상 프론트단으로 유의미한 데이터만 전달해줘야 한다고 생각합니다.
// 결국 이렇게 데이터를 뱉어내는 것도 하나의 자원이라 생각하기때문입니다.
-----------------


// 예를 들어서 판매자가 상품을 등록했으면 -> 그냥 그걸로 끝이지 굳이 불필요한 메시지가 필요할까에 관한 생각을 한번 해보셨으면 좋겠습니다.  ( 모든 로직 )
// 그리고 얼마전에 궁금해서 튜터님께 여쭤본 내용입니다.

Q: 예를들어 보드 서비스에서 -> member레포지토리를 받아서 사용하는 것이 맞을까요??
A: No -> 서비스를 참조해야한다였는데 이유가 기억이 안 납니다.. 아마 뭐 책임과 역할 뭐 그런 내용이였던걸로 기억하는데..

최종적으로 : 서비스 부문은 크게 확인을 안했습니다. -> 해당 내용들은 컨트롤러만 피드백 드렸습니다.


1. item부문
- item service를 구현체로 만들어서 사용하는 것이 확장성에 좋습니다 -> 샘플 : service-admin (한번 만들어 보심이 좋을 것 같습니다.)
- 제품조회 로직은 -> 누구나 이용할 수 있어야 한다고 생각합니다 ( 단건 조회, 모든 상품 조회 )
- itemDto 속에  request와 response를 같이 사용하시는데, 분리하는 것이 좋습니다.
- 예외는 서비스 로직에서 처리! (제품 조회 로직들)
- 지금 보면 @AuthenticationPrincipal에서 userDetails를 받아서 사용하는데, -> userDetailsimpl로 바꿀 것
이유는 userDetailsimpl이 userDetails를 상속받아서 사용한 구현체이기에!! 그냥 userDetails를 사용할 것이면 userDetaolsImpl을 만든 의미가 없음!

2. order부문

- 오더부분도 마찬가지로 dto를 분리하셔야 합니다.
- 토큰가지고 검증하는 부분 로직을 한번 생각해보셔야 할 것 같습니다.
그 이유는 결국 주문을 하는 로직에서는, 주문관련된 로직만 있어야 합니다. (하나의 책임만 할 수 있도록)
그런데 지금 보면 사용자를 검증하기 위한 책임도 하고 있으니, 한 서비스에서 2개의 책임을 하고 있는 것 같습니다.
- 예외처리는 서비스 로직에서!! (주문목록 조회)
상품 주문 부문... 생각해보자..

- 토큰을 가지고온다 -> claims를 선언 -> 만약 토큰이 널이 아닐 경우에 서비스 로직 실행 ->  토큰의 유효성을 검증하고.
- 이미 item에서는 사용자의 정보를 가지고 있다.  결국 토큰가지고 사용자 정보 가지고 오려고 하는것 같은데
@AuthenticationPrincipal -> 여기에서 사용자 정보 들고오면 될 것 같습니다.?( 현재 토큰의 주인 데이터)


<<<<<<< HEAD
=======
< 서비스 test >

상품 등록시 중복처리라... (동일한 상품 여러개 팔 수 있지 않을까?)

---------------------------------------------------------------
< api/customer/orders >
아이템 주문 시 -> 수량이 0개짜리가 주문이 들어갑니다 -> 수정 요청 -> 0개를 주문하는 경우는 없으니까??... 수량 체크 관련된 예외처리 필요할 듯

현재 : 사용자가 아이템을 구매신청한다 -> (수량이 0개 되겟지? order에는 해당 정보가 올라갈 것이고,  pk 번호 1번입니다 )
-> 만약 판매자가 1번 데이터를 수정해버리면? -> db가 중복됩니다 결국 orderitem쪽에는 같은 item id 식별자 1번으로 나올테니까

이렇게 수정해야할 것 같습니다 -> 사용자가 아이템을 구매 신청한다 -> 만약 판매자가 상품을 수정하거나 삭제할 시 order와 오더items를 확인하고,
만약에 데이터가 없으면 (즉, 주문처리가 됐으면 -> 해당 주문내역은 ) 수정 혹은 삭제 기능이 동작하도록 바꿔야 맞는 것 같습니다.
(지금 현재 실험해본결과 -> 해당 아이템에 관한 주문이 들어와있으면 데이터 삭제 시 500번 에러 뱉어냅니다)

---------------------------------------------------------------
< api/seller/order/{id}  >

주문 완료 처리 시 -> 주문 DB에서 해당 데이터 삭제해야 합니다. (주문이 완료되었으면)
아니면 이제 기능을 하나 따로 만들어서 만약에 status =1인 데이터를 다 지워버리는 방식으로 해도 좋을 것 같습니다.

이미 주문 완료된 데이터를 지워주지 않으면 다시 해당 url로 요청했을 때 -> 주문처리가 완료되었습니다로 나옴

---------------------------------------------------------------
< api/customer/orders > - 고객들의 전체 주문을 확인한다.
(데이터 이상하게 들어오는 것 같은데...)
1. 주문 처리가 완료된 데이터까지 일단 count 되는 것 같습니다 ==> 카운트 자체가 유동적이지 못하고 전체 리스트 고정
주문 확인을 누구나 다 할수 있는거 같은데, -> 사용자가 구매한 리스트만 보여줘야 하는거 아닌가?

반환하는 데이터 속 orderItemsList 속에 있는 id 값은 해당 상품의 id 값으로 바꿔줘야 합니다.

주문 처리가 완료된 데이터는 굳이 불러올 필요가 없다고 생각합니다 -> 주문 조회 시  // 이 문제는 즉 주문완료 처리 시 db에서 데이터 지워준다면 이 부분도 자연스레 해결될 것 같습니다.

그리고 구매자 이름을 받는 username 부분을 sellerName으로 바꾸면더 가독성이 좋을 것 같습니다.


------------------------------------------------------------
api/seller/orders -> 판매자의 주문을 확인한다 -> 즉 내가 판매한 물품에 관한 주문 데이터가 있는지 가지고 오나? -> 맞네 ㅇㅋ
>>>>>>> 3607f48f4485c262070afdc25e3a88bde7845dae
